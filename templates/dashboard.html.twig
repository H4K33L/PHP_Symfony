<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard - Tracker d'Habitudes</title>
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body {
      font-family: Arial, sans-serif;
      background: #f7f7f7;
      color: #333;
    }
    .sidebar {
      width: 250px;
      background: #3498db;
      color: #fff;
      position: fixed;
      top: 0;
      bottom: 0;
      left: 0;
      transform: translateX(-210px);
      transition: transform 0.3s;
      padding: 1rem 0.5rem;
    }
    .sidebar:hover {
      transform: translateX(0);
      padding: 1rem;
    }
    .sidebar h2 {
      text-align: center;
      margin-bottom: 2rem;
      font-size: 1.2rem;
    }
    .sidebar a {
      display: block;
      color: #fff;
      text-decoration: none;
      padding: 0.8rem 1rem;
      margin: 0.5rem 0;
      border-radius: 5px;
      transition: background 0.3s;
    }
    .sidebar a:hover { background: #2980b9; }
    .main-content {
      margin-left: 40px;
      padding: 2rem;
      transition: margin-left 0.3s;
    }
    .sidebar:hover ~ .main-content {
      margin-left: 250px;
    }
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }
    header h1 { font-size: 2rem; }
    .score {
      font-size: 1.2rem;
      background: #eee;
      padding: 0.5rem 1rem;
      border-radius: 5px;
    }
    .habits { margin-bottom: 2rem; }
    .habits h2 { margin-bottom: 1rem; }
    .habit {
      background: #fff;
      padding: 1rem;
      border-radius: 5px;
      margin-bottom: 1rem;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .habit span { font-weight: bold; }
    .habit button {
      background: #27ae60;
      border: none;
      color: #fff;
      padding: 0.5rem 1rem;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
    }
    .habit button:hover { background: #1e8449; }
    .notifications { margin-top: 2rem; }
    .notifications h2 { margin-bottom: 1rem; }
    .countdown {
      font-weight: bold;
      color: #2c3e50;
    }
    .message {
      background: #fff;
      padding: 1rem;
      border-radius: 5px;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
      text-align: center;
      font-size: 1.2rem;
      color: #27ae60;
    }
  </style>
</head>
<body>
  <nav class="sidebar">
    <h2>Menu</h2>
    <a href="/habitsManager">Habitudes</a>
    {% if app.user %}
        <a href="{% if app.user.group %}/groupManager{% else %}/groupManager/create{% endif %}">Mon Groupe</a>
    {% else %}
        <a href="/connexion">Mon Groupe</a>
    {% endif %}
    <a href="/profil">Mon Profil</a>
    <a href="/deconnexion">Déconnexion</a>
  </nav>
  <div class="main-content">
    <header>
        <h1>Bienvenue, {{ user.pseudo }}</h1>
        <div class="score">Score : <span>{{ user.score }}</span></div>
    </header>
    <section class="habits">
      <h2>Habitudes du jour</h2>
      {% set allHabitsValidated = true %}
      {% for habit in dailyHabits %}
        {% if not habit.validatedByUsers.contains(user) %}
          {% set allHabitsValidated = false %}
          <div class="habit" data-habit-id="{{ habit.Id }}" data-end-time="{{ habit.endTime|date('c') }}">
            <div>
              <p><span>{{ habit.text }}</span> - Quotidien</p>
              <small>Difficulté : {{ habit.difficulty }}</small>
              <div class="countdown"></div>
            </div>
            <form action="{{ path('toggle_habit', {'id': habit.Id}) }}" method="POST">
              <button type="submit" class="toggle">
                Terminé
              </button>
            </form>
          </div>
        {% endif %}
      {% endfor %}
      {% if allHabitsValidated %}
        <div class="message">Les tâches journalières sont accomplies !</div>
      {% endif %}
    </section>
    <section class="notifications">
        <h2>Invitations</h2>
        {% if user.receivedInvitations|length > 0 %}
            <ul>
                {% for invitation in user.receivedInvitations %}
                    <li>
                        Invitation de {{ invitation.sender.pseudo }} pour rejoindre {{ invitation.group.name }}
                        <form action="{{ path('invitation_accept', {'id': invitation.id}) }}" method="POST" style="display:inline;">
                            <button type="submit">Accepter</button>
                        </form>
                        <form action="{{ path('invitation_decline', {'id': invitation.id}) }}" method="POST" style="display:inline;">
                            <button type="submit">Refuser</button>
                        </form>
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p>Aucune invitation reçue.</p>
        {% endif %}
    </section>
  </div>

  <!-- Inclure Luxon -->
  <script src="https://cdn.jsdelivr.net/npm/luxon@3.3.0/build/global/luxon.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const { DateTime } = luxon;
      const habitRows = document.querySelectorAll('.habit');
      habitRows.forEach(row => {
        const habitId = row.getAttribute('data-habit-id');
        const endTime = DateTime.fromISO(row.getAttribute('data-end-time'));
        const countdownElem = row.querySelector('.countdown');

        const updateCountdown = () => {
          const now = DateTime.now();
          const diff = endTime.diff(now, ['days', 'hours', 'minutes', 'seconds']);

          if (diff.as('milliseconds') <= 0) {
            countdownElem.textContent = "Terminé";
            clearInterval(interval);

            fetch(`/deleteHabit/${habitId}`, { method: 'POST' })
              .then(response => {
                if (response.ok) {
                  row.remove();
                  fetch(`/deductPoints/${habitId}`, { method: 'POST' })
                    .then(response => {
                      if (response.ok) {
                        console.log('Points déduits avec succès.');
                      } else {
                        console.error('Erreur lors de la déduction des points.');
                      }
                    })
                    .catch(error => console.error('Erreur:', error));
                } else {
                  console.error('Erreur lors de la suppression automatique.');
                }
              })
              .catch(error => console.error('Erreur:', error));
          } else {
            countdownElem.textContent = `${diff.days}j ${diff.hours}h ${diff.minutes}m ${Math.floor(diff.seconds)}s`;
          }
        };

        updateCountdown();
        const interval = setInterval(updateCountdown, 1000);
      });
    });
  </script>
</body>
</html>