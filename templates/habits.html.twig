<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestion des Habitudes</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f7f7f7;
      color: #333;
      display: flex;
      margin: 0;
      padding: 0;
      position: relative;
      overflow: hidden;
    }
    #interactive-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
    }
    nav.sidebar {
      width: 250px;
      background-color: #3498db;
      color: #fff;
      position: fixed;
      top: 0;
      bottom: 0;
      left: 0;
      transform: translateX(-210px);
      transition: transform 0.3s ease, padding 0.3s ease;
      padding: 1rem 0.5rem;
    }
    nav.sidebar:hover {
      transform: translateX(0);
      padding: 1rem;
    }
    nav.sidebar h2 {
      text-align: center;
      margin-bottom: 2rem;
      font-size: 1.2rem;
    }
    nav.sidebar a {
      display: block;
      color: #fff;
      text-decoration: none;
      padding: 0.8rem 1rem;
      margin: 0.5rem 0;
      border-radius: 5px;
      transition: background-color 0.3s ease;
    }
    nav.sidebar a:hover {
      background-color: #2980b9;
    }
    /* Optionnel ‚Äì sous-titre */
    nav.sidebar .sub-title {
      text-align: center;
      margin-bottom: 2rem;
      font-size: 1.2rem;
      font-weight: normal;
    }
    .main-content {
      margin-left: 40px;
      padding: 2rem;
      width: 100%;
      transition: margin-left 0.3s;
    }
    nav.sidebar:hover ~ .main-content {
      margin-left: 250px;
    }
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
    }
    header h1 {
      font-size: 2rem;
      color: #2c3e50;
    }
    .score {
      font-size: 1.2rem;
      background: #eee;
      padding: 0.5rem 1rem;
      border-radius: 5px;
      font-weight: bold;
    }
    .habits-section {
      margin-bottom: 2rem;
    }
    h2 {
      font-size: 1.6rem;
      color: #2c3e50;
      margin-bottom: 1rem;
    }
    form input, form button {
      padding: 10px;
      margin-right: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 1rem;
    }
    /* Augmentation de la largeur de la case "Difficult√©" */
    input[name="difficulty"] {
      width: 150px;
    }
    form button {
      background: #27ae60;
      color: #fff;
      border: none;
      cursor: pointer;
      transition: background 0.3s;
    }
    form button:hover {
      background: #1e8449;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      background: #fff;
      border-radius: 5px;
      overflow: hidden;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
    }
    th, td {
      border: 1px solid #ddd;
      padding: 12px;
      text-align: left;
      font-size: 1rem;
    }
    th {
      background-color: #f4f4f4;
      font-size: 1.2rem;
    }
    tr:hover {
      background: #f9f9f9;
    }
    .habit-actions {
      display: flex;
      gap: 10px;
    }
    .habit-actions button {
      padding: 5px 10px;
      cursor: pointer;
      border: none;
      border-radius: 5px;
      font-size: 0.9rem;
    }
    .habit-actions .toggle {
      background: #3498db;
      color: white;
    }
    .habit-actions .toggle:hover {
      background: #2980b9;
    }
    .habit-actions .delete {
      background: #e74c3c;
      color: white;
    }
    .habit-actions .delete:hover {
      background: #c0392b;
    }
    .notifications {
      margin-top: 2rem;
      background: #fff;
      padding: 1rem;
      border-radius: 5px;
      box-shadow: 0 0 5px rgba(0,0,0,0.1);
    }
    .color-indicator {
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: inline-block;
    }
    .habit-actions .delete.disabled {
      background: #ccc;
      cursor: not-allowed;
    }
  </style>
</head>
<body>
  <canvas id="interactive-bg"></canvas>
  
  <nav class="sidebar">
    <h2>Menu</h2>
    <a href="/dashboard">Dashboard</a>
    {% if app.user %}
      <a href="{% if app.user.group %}/groupManager{% else %}/groupManager/create{% endif %}">Mon Groupe</a>
    {% else %}
      <a href="/connexion">Mon Groupe</a>
    {% endif %}
    <a href="/profil">Mon Profil</a>
    <a href="/deconnexion">D√©connexion</a>
  </nav>
  
  <div class="main-content">
    <header>
      <h1>Bienvenue, {{ app.user.pseudo }}</h1>
      <div class="score">Score : <span>{{ app.user.getScore() }}</span></div>
    </header>

    <section class="habits-section">
      <h2>Ajouter une Habitude</h2>
      <form action="{{ path('add_habit') }}" method="POST">
        <input type="text" name="text" placeholder="Nom de l'habitude" required>
        <input type="number" name="difficulty" placeholder="Difficult√© (1-3)" min="1" max="3" required>
        <button type="submit">Ajouter</button>
      </form>

      <h2>Liste des Habitudes</h2>
      <table>
        <thead>
          <tr>
            <th>Texte</th>
            <th>Difficult√©</th>
            <th>Couleur</th>
            <th>Statut</th>
            <th>Compte √† rebours</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {% for habit in habits %}
            <tr class="habit" data-habit-id="{{ habit.getId() }}" data-end-time="{{ habit.getEndTime()|date('c') }}">
              <td>{{ habit.getText() }}</td>
              <td>{{ habit.getDifficulty() }}</td>
              <td>
                <div class="color-indicator" style="background: {{ habit.getColor() }};"></div>
              </td>
              <td>{{ habit.validatedByUsers.contains(app.user) ? '‚úîÔ∏è Termin√©' : '‚ùå Non termin√©' }}</td>
              <td>
                <span class="countdown"></span>
              </td>
              <td class="habit-actions">
                <form action="{{ path('toggle_habit', {'id': habit.getId()}) }}" method="POST">
                  <button type="submit" class="toggle">
                    {{ habit.validatedByUsers.contains(app.user) ? 'Non termin√©' : 'Termin√©' }}
                  </button>
                </form>
                {% if habit.getText() != 'Faire du sport' and habit.getText() != 'Lire un livre' %}
                  <form action="{{ path('delete_habit', {'id': habit.getId()}) }}" method="POST">
                    <button type="submit" class="delete" onclick="return confirm('Supprimer cette habitude ?');">üóë Supprimer</button>
                  </form>
                {% else %}
                  <button class="delete disabled" disabled>üóë Supprimer</button>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </section>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/luxon@3.3.0/build/global/luxon.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const { DateTime } = luxon;
      const habitRows = document.querySelectorAll('.habit');
      habitRows.forEach(row => {
        const habitId = row.getAttribute('data-habit-id');
        const endTime = DateTime.fromISO(row.getAttribute('data-end-time'));
        const countdownElem = row.querySelector('.countdown');

        const updateCountdown = () => {
          const now = DateTime.now();
          const diff = endTime.diff(now, ['days', 'hours', 'minutes', 'seconds']);

          if (diff.as('milliseconds') <= 0) {
            countdownElem.textContent = "Termin√©";
            clearInterval(interval);

            fetch(`/deleteHabit/${habitId}`, { method: 'POST' })
              .then(response => {
                if (response.ok) {
                  row.remove();
                  fetch(`/deductPoints/${habitId}`, { method: 'POST' })
                    .then(response => {
                      if (response.ok) {
                        console.log('Points d√©duits avec succ√®s.');
                      } else {
                        console.error('Erreur lors de la d√©duction des points.');
                      }
                    })
                    .catch(error => console.error('Erreur:', error));
                } else {
                  console.error('Erreur lors de la suppression automatique.');
                }
              })
              .catch(error => console.error('Erreur:', error));
          } else {
            countdownElem.textContent = `${diff.days}j ${diff.hours}h ${diff.minutes}m ${Math.floor(diff.seconds)}s`;
          }
        };

        updateCountdown();
        const interval = setInterval(updateCountdown, 1000);
      });
    });
  </script>
  
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      const canvas = document.getElementById("interactive-bg");
      const ctx = canvas.getContext("2d");

      function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      }
      window.addEventListener("resize", resizeCanvas);
      resizeCanvas();

      const particles = [];
      const numParticles = 100;
      for (let i = 0; i < numParticles; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 1,
          vy: (Math.random() - 0.5) * 1,
          radius: 2 + Math.random() * 2
        });
      }

      let mouseX = null, mouseY = null;
      canvas.addEventListener("mousemove", function(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
      });
      canvas.addEventListener("mouseleave", function() {
        mouseX = null;
        mouseY = null;
      });

      function updateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        for (let i = 0; i < particles.length; i++) {
          let p = particles[i];

          p.x += p.vx;
          p.y += p.vy;

          if (p.x < 0 || p.x > canvas.width) p.vx = -p.vx;
          if (p.y < 0 || p.y > canvas.height) p.vy = -p.vy;

          if (mouseX !== null && mouseY !== null) {
            let dx = mouseX - p.x;
            let dy = mouseY - p.y;
            let dist = Math.sqrt(dx * dx + dy * dy);
            if (dist < 100) {
              p.vx += dx * 0.0005;
              p.vy += dy * 0.0005;
            }
          }

          ctx.beginPath();
          ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
          ctx.fillStyle = "#3498db";
          ctx.fill();
        }

        for (let i = 0; i < particles.length; i++) {
          for (let j = i + 1; j < particles.length; j++) {
            let dx = particles[i].x - particles[j].x;
            let dy = particles[i].y - particles[j].y;
            let distance = Math.sqrt(dx * dx + dy * dy);
            if (distance < 100) {
              ctx.beginPath();
              ctx.moveTo(particles[i].x, particles[i].y);
              ctx.lineTo(particles[j].x, particles[j].y);
              ctx.strokeStyle = "rgba(52, 152, 219," + (1 - distance / 100) + ")";
              ctx.lineWidth = 0.5;
              ctx.stroke();
            }
          }
        }
        requestAnimationFrame(updateParticles);
      }

      updateParticles();
    });
  </script>
</body>
</html>
