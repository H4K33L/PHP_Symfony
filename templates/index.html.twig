<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tracker d'Habitudes - Accueil</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; }
    body {
      font-family: 'Roboto', sans-serif;
      background: #fff; /* Fond remplacé par un blanc */
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
      position: relative;
      overflow: hidden;
    }
    /* Fond d'écran interactif */
    #interactive-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
    }
    .container {
      background: #fff;
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.15);
      width: 100%;
      max-width: 500px;
      padding: 2rem;
      animation: fadeIn 0.8s ease-in-out;
      z-index: 1;
    }
    @keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }
    .tabs { display: flex; justify-content: space-around; margin-bottom: 1.5rem; border-bottom: 2px solid #eee; }
    .tabs button {
      background: none;
      border: none;
      font-size: 1.2rem;
      padding: 0.5rem 1rem;
      cursor: pointer;
      transition: color 0.3s, border-bottom 0.3s;
      color: #555;
    }
    .tabs button.active { color: #5563DE; border-bottom: 2px solid #5563DE; }
    .form { display: none; }
    .form.active { display: block; }
    h1 { margin-bottom: 1.5rem; color: #5563DE; font-size: 2rem; text-align: center; }
    .form-group { margin-bottom: 1.2rem; text-align: left; }
    .form-group label { display: block; margin-bottom: 0.5rem; font-weight: 700; color: #333; }
    .form-group input {
      width: 100%;
      padding: 0.8rem;
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 1rem;
      transition: border-color 0.3s;
    }
    .form-group input:focus { border-color: #5563DE; outline: none; }
    .form-actions { text-align: center; margin-top: 1.5rem; }
    .form-actions button {
      padding: 0.8rem 1.5rem;
      font-size: 1rem;
      color: #fff;
      background: #5563DE;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s, transform 0.3s;
    }
    .form-actions button:hover { background: #4453c7; transform: translateY(-2px); }
    .error { color: #e74c3c; margin-top: 0.5rem; font-size: 0.9rem; text-align: center; }
  </style>
</head>
<body>
  <canvas id="interactive-bg"></canvas>
  
  <div class="container">
    <div class="tabs">
      <button id="loginTab" class="active">Connexion</button>
      <button id="registerTab">Inscription</button>
    </div>

    <!-- Formulaire de Connexion -->
    <div id="loginForm" class="form active">
      <h1>Connexion</h1>
      <form action="/connexion" method="POST">
          <input type="text" id="identifier" name="pseudo" placeholder="Pseudo" required>
          <input type="password" id="loginPassword" name="password" placeholder="Mot de passe" required>
          <button type="submit">Se connecter</button>
      </form>
      <div class="error" id="loginError"></div>
    </div>

    <!-- Formulaire d'Inscription -->
    <div id="registerForm" class="form">
      <h1>Inscription</h1>
      {% if error is defined and error is not null %}
          <div class="alert alert-danger">
              {{ error }}
          </div>
      {% endif %}
      <form action="/inscription" method="POST" enctype="multipart/form-data">
        <div class="form-group">
          <label for="registerPseudo">Pseudo</label>
          <input type="text" id="registerPseudo" name="pseudo" placeholder="Votre pseudo" required>
        </div>
        <div class="form-group">
          <label for="registerEmail">Email</label>
          <input type="email" id="registerEmail" name="email" placeholder="exemple@mail.com" required>
        </div>
        <div class="form-group">
          <label for="registerPassword">Mot de passe</label>
          <input type="password" id="registerPassword" name="password" placeholder="Votre mot de passe" required>
        </div>
        <div class="form-group">
          <label for="confirmPassword">Confirmer le mot de passe</label>
          <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirmez votre mot de passe" required>
        </div>
        <div class="form-group">
          <label for="profilePicture">Photo de profil (max 1Mo)</label>
          <input type="file" id="profilePicture" name="profilePicture" accept="image/*">
        </div>
        <div class="form-actions">
          <button type="submit">S'inscrire</button>
        </div>
        <div class="error" id="registerError"></div>
      </form>
    </div>
  </div>

  <script>
    const loginTab = document.getElementById('loginTab');
    const registerTab = document.getElementById('registerTab');
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');

    loginTab.addEventListener('click', () => {
      loginTab.classList.add('active');
      registerTab.classList.remove('active');
      loginForm.classList.add('active');
      registerForm.classList.remove('active');
    });

    registerTab.addEventListener('click', () => {
      registerTab.classList.add('active');
      loginTab.classList.remove('active');
      registerForm.classList.add('active');
      loginForm.classList.remove('active');
    });

    document.querySelector('#loginForm form').addEventListener('submit', function(e) {
      const identifier = document.querySelector('#loginForm input[name="pseudo"]').value.trim();
      const password = document.querySelector('#loginForm input[name="password"]').value;
      const errorEl = document.getElementById('loginError');

      if (errorEl) {
        errorEl.textContent = "";
        if (!identifier || !password) {
          e.preventDefault();
          errorEl.textContent = "Veuillez renseigner tous les champs.";
        }
      }
    });

    document.querySelector('#registerForm form').addEventListener('submit', function(e) {
      const password = document.getElementById('registerPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const errorEl = document.getElementById('registerError');

      if (errorEl) {
        errorEl.textContent = "";
        if (password !== confirmPassword) {
          e.preventDefault();
          errorEl.textContent = "Les mots de passe ne correspondent pas.";
        }
      }
    });
  </script>
  
   <script>
    document.addEventListener("DOMContentLoaded", function() {
      const canvas = document.getElementById("interactive-bg");
      const ctx = canvas.getContext("2d");

       function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      }
      window.addEventListener("resize", resizeCanvas);
      resizeCanvas();

       const particles = [];
      const numParticles = 100;
      for (let i = 0; i < numParticles; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 1,
          vy: (Math.random() - 0.5) * 1,
          radius: 2 + Math.random() * 2
        });
      }

       let mouseX = null, mouseY = null;
      canvas.addEventListener("mousemove", function(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
      });
      canvas.addEventListener("mouseleave", function() {
        mouseX = null;
        mouseY = null;
      });

       function updateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
         for (let i = 0; i < particles.length; i++) {
          let p = particles[i];
          p.x += p.vx;
          p.y += p.vy;
           if (p.x < 0 || p.x > canvas.width) p.vx = -p.vx;
          if (p.y < 0 || p.y > canvas.height) p.vy = -p.vy;
          // Attraction vers la souris
          if (mouseX !== null && mouseY !== null) {
            let dx = mouseX - p.x;
            let dy = mouseY - p.y;
            let dist = Math.sqrt(dx * dx + dy * dy);
            if (dist < 100) {
              p.vx += dx * 0.0005;
              p.vy += dy * 0.0005;
            }
          }
          ctx.beginPath();
          ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
          ctx.fillStyle = "#3498db";
          ctx.fill();
        }

         for (let i = 0; i < particles.length; i++) {
          for (let j = i + 1; j < particles.length; j++) {
            let dx = particles[i].x - particles[j].x;
            let dy = particles[i].y - particles[j].y;
            let distance = Math.sqrt(dx * dx + dy * dy);
            if (distance < 100) {
              ctx.beginPath();
              ctx.moveTo(particles[i].x, particles[i].y);
              ctx.lineTo(particles[j].x, particles[j].y);
              ctx.strokeStyle = "rgba(52, 152, 219," + (1 - distance / 100) + ")";
              ctx.lineWidth = 0.5;
              ctx.stroke();
            }
          }
        }
        requestAnimationFrame(updateParticles);
      }
      updateParticles();
    });
  </script>
</body>
</html>
