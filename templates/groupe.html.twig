<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mon Groupe - Tracker d'Habitudes</title>
  <style>
    /* Reset global */
    *, *::before, *::after {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: Arial, sans-serif;
      background-color: #f0f0f0;
      display: flex;
      min-height: 100vh;
      position: relative;
      overflow: hidden;
    }
     #interactive-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
    }
    nav.sidebar {
      width: 250px;
      background-color: #3498db;
      color: #fff;
      position: fixed;
      top: 0;
      bottom: 0;
      left: 0;
      transform: translateX(-210px);
      transition: transform 0.3s ease, padding 0.3s ease;
      padding: 1rem 0.5rem;
    }
    nav.sidebar:hover {
      transform: translateX(0);
      padding: 1rem;
    }
    nav.sidebar h2 {
      text-align: center;
      margin-bottom: 2rem;
      font-size: 1.2rem;
    }
    nav.sidebar a {
      display: block;
      color: #fff;
      text-decoration: none;
      padding: 0.8rem 1rem;
      margin: 0.5rem 0;
      border-radius: 5px;
      transition: background-color 0.3s ease;
    }
    nav.sidebar a:hover {
      background-color: #2980b9;
    }
    /* Contenu principal */
    .main-content {
      margin-left: 40px;
      padding: 2rem;
      transition: margin-left 0.3s ease;
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    nav.sidebar:hover ~ .main-content {
      margin-left: 250px;
    }
    /* Titre principal */
    .main-content > h1 {
      text-align: center;
      color: #3498db;
      margin-bottom: 1.5rem;
    }
    /* Style de la zone container */
    .container {
      background-color: #fff;
      max-width: 800px;
      width: 100%;
      padding: 2rem;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      text-align: center;
    }
    h1, h2, h3 {
      text-align: center;
      color: #3498db;
      margin-bottom: 1.5rem;
    }
    .score-total {
      font-size: 20px;
      font-weight: bold;
      color: #007bff;
      margin-bottom: 15px;
    }
    .members-table {
      width: 100%;
      border-collapse: collapse;
      background: #ffffff;
      border-radius: 8px;
      overflow: hidden;
      margin-top: 1rem;
    }
    .members-table th, .members-table td {
      padding: 10px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    .members-table th {
      background: #007bff;
      color: white;
      font-weight: bold;
    }
    .members-table tr:nth-child(even) {
      background: #f2f2f2;
    }
    .members-table tr:hover {
      background: #ddd;
    }
    .member-score {
      font-weight: bold;
      color: #28a745;
    }
    .invite {
      margin-top: 2rem;
    }
    .invite input[type="text"] {
      padding: 0.5rem;
      width: 60%;
      border: 1px solid #ccc;
      border-radius: 5px;
      margin-right: 0.5rem;
    }
    .invite button {
      padding: 0.5rem 1rem;
      background-color: #27ae60;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .invite button:hover {
      background-color: #1e8449;
    }
  </style>
</head>
<body>
  <!-- Fond d'écran interactif -->
  <canvas id="interactive-bg"></canvas>
  
  <nav class="sidebar" aria-label="Menu principal">
    <h2>Menu</h2>
    <a href="/dashboard">Dashboard</a>
    <a href="/habitsManager">Habitudes</a>
    <a href="/profil">Mon Profil</a>
    <a href="/deconnexion">Déconnexion</a>
  </nav>
  
  <div class="main-content">
    <h1>Votre groupe</h1>
    <div class="container">
      {% if user.group %}
        <h2>Groupe : {{ group.name }}</h2>
        <p class="score-total">Score total du groupe : {{ group.score }}</p>
        <p><strong>Chef du groupe :</strong> {{ group.owner.pseudo }}</p>
        <h3>Membres :</h3>
        <table class="members-table">
          <thead>
            <tr>
              <th>Utilisateur</th>
              <th>Score</th>
            </tr>
          </thead>
          <tbody>
            {% for member in group.members|sort((a, b) => b.score <=> a.score) %}
              <tr>
                <td>{{ member.pseudo }}</td>
                <td class="member-score">{{ member.score }}</td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
        
        {% if user.group %}
          <div class="group-actions" style="margin-top: 2rem;">
            {% if group.owner == user %}
              <form action="{{ path('group_delete', {'id': group.id}) }}" method="POST" style="display: inline-block;" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce groupe ?')">
                <button type="submit" style="background: #e74c3c; color: white; padding: 0.5rem 1rem; border: none; border-radius: 5px; cursor: pointer;">Supprimer le groupe</button>
              </form>
            {% else %}
              <form action="{{ path('leave_group') }}" method="POST" style="display: inline-block;" onsubmit="return confirm('Êtes-vous sûr de vouloir quitter ce groupe ?')">
                <button type="submit" style="background: #f39c12; color: white; padding: 0.5rem 1rem; border: none; border-radius: 5px; cursor: pointer;">Quitter le groupe</button>
              </form>
            {% endif %}
          </div>
        {% endif %}
        
        <div class="invite">
          <h2>Inviter un utilisateur</h2>
          <form action="{{ path('group_invite', {'id': group.id}) }}" method="POST">
            <input type="text" name="pseudo" placeholder="Pseudo de l'utilisateur" required>
            <button type="submit">Inviter</button>
          </form>
        </div>
      {% else %}
        <form action="{{ path('group_create') }}" method="POST">
          <input type="text" name="group_name" placeholder="Nom du groupe" required>
          <button type="submit">Créer un groupe</button>
        </form>
      {% endif %}
    </div>
  </div>
  
   <script>
    document.addEventListener("DOMContentLoaded", function() {
      const canvas = document.getElementById("interactive-bg");
      const ctx = canvas.getContext("2d");

       function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
      }
      window.addEventListener("resize", resizeCanvas);
      resizeCanvas();

       const particles = [];
      const numParticles = 100;
      for (let i = 0; i < numParticles; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          vx: (Math.random() - 0.5) * 1,
          vy: (Math.random() - 0.5) * 1,
          radius: 2 + Math.random() * 2
        });
      }

       let mouseX = null, mouseY = null;
      canvas.addEventListener("mousemove", function(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
      });
      canvas.addEventListener("mouseleave", function() {
        mouseX = null;
        mouseY = null;
      });

       function updateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
         for (let i = 0; i < particles.length; i++) {
          let p = particles[i];
          p.x += p.vx;
          p.y += p.vy;
           if (p.x < 0 || p.x > canvas.width) p.vx = -p.vx;
          if (p.y < 0 || p.y > canvas.height) p.vy = -p.vy;
           if (mouseX !== null && mouseY !== null) {
            let dx = mouseX - p.x;
            let dy = mouseY - p.y;
            let dist = Math.sqrt(dx * dx + dy * dy);
            if (dist < 100) {
              p.vx += dx * 0.0005;
              p.vy += dy * 0.0005;
            }
          }
          ctx.beginPath();
          ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
          ctx.fillStyle = "#3498db";
          ctx.fill();
        }
         for (let i = 0; i < particles.length; i++) {
          for (let j = i + 1; j < particles.length; j++) {
            let dx = particles[i].x - particles[j].x;
            let dy = particles[i].y - particles[j].y;
            let distance = Math.sqrt(dx * dx + dy * dy);
            if (distance < 100) {
              ctx.beginPath();
              ctx.moveTo(particles[i].x, particles[i].y);
              ctx.lineTo(particles[j].x, particles[j].y);
              ctx.strokeStyle = "rgba(52, 152, 219," + (1 - distance / 100) + ")";
              ctx.lineWidth = 0.5;
              ctx.stroke();
            }
          }
        }
        requestAnimationFrame(updateParticles);
      }
      updateParticles();
    });
  </script>
</body>
</html>
